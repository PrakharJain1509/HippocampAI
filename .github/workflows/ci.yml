name: CI

on:
  push:
    branches: ["*"]

env:
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"

jobs:
  test:
    name: Test and Lint (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    services:
      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
          - 6334:6334

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: |
            requirements.txt
            pyproject.toml

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e '.[dev,api]'

      - name: Wait for Qdrant to be ready
        run: |
          echo "Waiting for Qdrant to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost:6333/healthz > /dev/null 2>&1; then
              echo "Qdrant is ready!"
              curl -s http://localhost:6333/ | head -20
              exit 0
            fi
            echo "Attempt $i/30: Qdrant not ready yet, waiting..."
            sleep 2
          done
          echo "Qdrant failed to become ready"
          exit 1

      - name: Lint with Ruff
        run: |
          ruff check . --output-format=github
          ruff format . --check

      - name: Run Tests
        run: |
          pytest -v --maxfail=1 --disable-warnings --cov=src --cov-report=term-missing
        env:
          QDRANT_HOST: localhost
          QDRANT_PORT: 6333
          QDRANT_URL: http://localhost:6333

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test]  # only build if tests pass

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Validate build with Twine
        run: |
          twine check dist/*